URL_STATION = 'http://tunein.com/radio/-%s/'

RE_IDS = [
    Regex('-(?P<id>(s|p)\d+)/'),
    Regex('id=(?P<id>(s|p)\d+)')
    ]

CUSTOM_URL_PREFIX = 'tunein://play?'

####################################################################################################
def MetadataObjectForURL(url):

    Log.Debug("Requesting metadata for url: %s", url)

    customStream = ParseCustomUrl(url)

    if customStream:
        title = customStream['title']
        summary = customStream['summary']
        playing = summary
        image_url = customStream['image']
    else:
        station = TuneInStation(url)

        title = station.title
        summary = station.title
        playing = station.playing
        image_url = station.image_url

    return TrackObject(
        artist = title,
        album = playing,
        title = summary,
        summary = playing,
        source_title = 'TuneIn',
        thumb = Resource.ContentsOfURLWithFallback(image_url)
    )

####################################################################################################
def MediaObjectsForURL(url):

   return [MediaObject(
        # container = container,
        # audio_codec = audio_codec,
        # bitrate = bitrate,
        # audio_channels = 2,
        parts = [PartObject(key = Callback(PlayTrack, url=url))]
    )]

####################################################################################################
def PlayTrack(url):

    customStream = ParseCustomUrl(url)

    if customStream:
        return Redirect(customStream['url'])

    station = TuneInStation(url)

    best_reliability = -1
    for stream in station.loadStreams():
        reliability = int(stream['Reliability'])
        if reliability > best_reliability:
            best_reliability = reliability
            stream_url = stream['Url']

    # stream_url = HTTP.Request(m3u8).content.strip()

    # Log("m3u8 url: %s, audio stream: %s" %(m3u8, stream_url))

    return Redirect(stream_url)

####################################################################################################
def GetStationId(url):

    for re in RE_IDS:
        m = re.search(url)
        if m:
            return m.group('id')

    return None

####################################################################################################
def UrlRequest(url):

    return HTTP.Request(
        url,
        headers={
            'x-requested-with': 'XMLHttpRequest',
            'Accept' : 'application/json, text/javascript, */*; q=0.01'}
        ).content

####################################################################################################
def ParseCustomUrl(url):

    if not url.startswith(CUSTOM_URL_PREFIX):
        return None

    param = url[len(CUSTOM_URL_PREFIX):]

    # Log.Debug("Url: %s, param encoded: %s", url, param)

    s = String.Decode(param)
    # Log.Debug("param decoded: %s", s)

    return JSON.ObjectFromString(s)

####################################################################################################
class TuneInStation:

    def __init__(self, url='', id=''):
        if not id:
            id = GetStationId(url)

        text = UrlRequest(URL_STATION % id)

        # Log.Debug("Requested url: %s, response: %s", url, text)

        payload = JSON.ObjectFromString(text)['payload']

        if 'Station' in payload:
            self.js = payload['Station']
        else:
            self.js = payload['Program']

        self.broadcast = self.js['broadcast']
        self.echo = self.broadcast['EchoData']

        # Log.Debug('Station id: %s, json: %s' % (id, self.js))
        # print('Station id: %s, json: %s' % (id, self.js))

    @property
    def id(self):
        return self.echo['targetGuideId']

    @property
    def title(self):
        return self.broadcast['Title']

    @property
    def description(self):
        return self.js['description']

    @property
    def image_url(self):
        return self.broadcast['Logo']

    @property
    def summary(self):
        return self.echo['subtitle']

    @property
    def playing(self):
        return self.broadcast['SongPlayingTitle']

    @property
    def stream_url(self):
        url = self.broadcast['StreamUrl']
        if url.startswith('//'):
            url = 'http:'+url;
        return url

    def loadStreams(self):
        text = UrlRequest(self.stream_url)[2:-2]
        return JSON.ObjectFromString(text)['Streams']

